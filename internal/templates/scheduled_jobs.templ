package templates

import (
    "strconv"
	"github.com/labstack/echo/v4"
    "github.com/rsvix/go-htmx-app-template/internal/structs"
    "github.com/rsvix/go-htmx-app-template/internal/middlewares"
)

templ ScheduleJobsPage(c echo.Context, pageTitle string, userId int, userName string, jobs []structs.ScheduledJob, agentArr []string, totalJobs int){
    @Layout(c, pageTitle, true, userName, true) {
        <section class="bg-gray-50 dark:bg-gray-900 antialiased m-2 md:m-4 lg:m-6 xl:m-8 2xl:m-10">
            <!-- Page title -->
            <div class="text-center p-0 mt-0 mb-2 md:mb-4 lg:mb-6 xl:mb-8 2xl:mb-10">
                <h2 class="text-3xl m-0 pb-2 font-bold leading-tight tracking-tight text-gray-900 dark:text-white">
                    Cron Jobs
                </h2>
            </div>
            <!-- Page content -->
            <div class="flow-root">
                <div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg overflow-hidden">
                    <!-- Table header -->
                    <div class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 p-4">
                        <!-- Search -->
                        <div class="w-full md:w-1/2">
                            <form class="flex items-center">
                                <label for="simple-search" class="sr-only">Search</label>
                                <div class="relative w-full">
                                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                        <svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                    <input 
                                        type="text" 
                                        id="text-search-box" 
                                        class="max-w-md bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full pl-10 p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                                        placeholder="Search" 
                                        required=""
                                        />
                                </div>
                            </form>
                        </div>
                        <!--  Buttons -->
                        <div class="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
                            <div class="flex items-center space-x-3 w-full md:w-auto">
                                <!-- Add snippet -->
                                <button 
                                    hx-get="/newcronjob"
                                    hx-target="body"
                                    hx-swap="beforeend"
                                    type="button" 
                                    class="flex items-center justify-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-2 focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-primary-600 dark:hover:bg-primary-700 focus:outline-none dark:focus:ring-primary-800"
                                    type="button"
                                    >
                                    <svg class="h-3.5 w-3.5 mr-2" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                        <path clip-rule="evenodd" fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"/>
                                    </svg>
                                    Add cronjob
                                </button>
                                <!-- Filter -->
                                <div class="relative inline-block text-left">
                                    <!-- Filter button -->
                                    <div>
                                        <button 
                                            type="button" 
                                            class="w-full md:w-auto flex items-center justify-center py-2 px-4 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:ring-2 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700" 
                                            id="snip-filter-button"
                                            >
                                            Filter
                                            <svg class="-mr-1 ml-1.5 w-5 h-5" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                                <path clip-rule="evenodd" fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"/>
                                            </svg>
                                        </button>
                                    </div>
                                    <!-- Filter list -->
                                    <div 
                                        class="absolute right-0 top-9 z-40 mt-2 w-48 p-3 origin-top-right rounded-md bg-white dark:bg-gray-700 shadow ring-1 ring-black ring-opacity-5 focus:outline-none"
                                        id="snip-filter-list" 
                                        >
                                        <h6 
                                            class="mb-3 text-sm font-medium text-gray-900 dark:text-white"
                                            >
                                            Choose agent
                                        </h6>
                                        <div id="snip-filter-elements">
                                            <ul
                                                class="space-y-2 text-sm" 
                                                >
                                                for _, agent := range agentArr {
                                                    <li class="flex items-center">
                                                        <input
                                                            type="checkbox"
                                                            name="filter-checkbox" 
                                                            value={ agent }
                                                            class="w-4 h-4 bg-gray-100 border-gray-300 rounded text-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500"
                                                            />
                                                        <label
                                                            for={ agent }
                                                            class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-100"
                                                            >
                                                            { agent }
                                                        </label>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Table -->
                    <div class="overflow-x-auto">
                        <table 
                            class="w-full text-sm text-left text-gray-500 dark:text-gray-400"
                            id="snippets-table"
                            >
                            <!-- Table head -->
                            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                                <tr>
                                    <th scope="col" class="px-4 py-3 text-left"  >Cron expression</th>
                                    <th scope="col" class="px-4 py-3 text-center">Description</th>
                                    <th scope="col" class="px-4 py-3 text-center">Bot</th>
                                    <th scope="col" class="px-4 py-3 text-center">Version</th>
                                    <th scope="col" class="px-4 py-3 text-center">Agent</th>
                                    <th scope="col" class="px-4 py-3 text-center">Edit</th>
                                    <th scope="col" class="px-4 py-3 text-center">Delete</th>
                                </tr>
                            </thead>
                            <!-- Table body -->
                            <tbody>
                                <!-- Loop -->
                                for _, job := range jobs {
                                    <tr class="border-b dark:border-gray-700">
                                        <td class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white text-left">
                                            { job.CronExp }
                                        </td>
                                        <td class="px-4 py-3 text-center">{ job.CronDesc }</td>
                                        <td class="px-4 py-3 text-center">{ job.BotName }</td>
                                        <td class="px-4 py-3 text-center">{ job.BotVersion }</td>
                                        <td class="px-4 py-3 text-center">{ job.TargetAgent }</td>
                                        <!-- Edit -->
                                        <td class="px-4 py-3 text-center">
                                            <button
                                                hx-get={ "/cronjobedit/"+strconv.FormatUint(uint64(job.Id), 10) }
                                                hx-target="body"
                                                hx-swap="beforeend"
                                                class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-xl ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white"
                                                >
                                                <i class="fa-regular fa-pen-to-square"></i>
                                            </button>
                                        </td>
                                        <!-- Delete -->
                                        <td class="px-4 py-3 text-center">
                                            <button
                                                hx-delete={ "/cronjobdelete/"+strconv.FormatUint(uint64(job.Id), 10) }
                                                hx-target="body"
                                                hx-swap="beforeend"
                                                class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-xl ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white"
                                                >
                                                <i class="fa-regular fa-trash-can"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <!-- Table footer -->
                    <nav class="flex flex-col md:flex-row justify-between items-start md:items-center space-y-3 md:space-y-0 p-4" aria-label="Table navigation">
                        <span class="text-sm font-normal text-gray-500 dark:text-gray-400">
                            Showing
                            <span class="font-semibold text-gray-900 dark:text-white">1-{ strconv.Itoa(totalJobs) }</span>
                            of
                            <span class="font-semibold text-gray-900 dark:text-white">{ strconv.Itoa(totalJobs) }</span>
                        </span>
                        <ul class="inline-flex items-stretch -space-x-px">
                            <li>
                                <a href="#" class="flex items-center justify-center h-full py-1.5 px-3 ml-0 text-gray-500 bg-white rounded-l-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                                    <span class="sr-only">Previous</span>
                                    <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                            </li>
                            <li>
                                <a href="#" class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">1</a>
                            </li>
                            <li>
                                <a href="#" class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">2</a>
                            </li>
                            <li>
                                <a href="#" aria-current="page" class="flex items-center justify-center text-sm z-10 py-2 px-3 leading-tight text-primary-600 bg-primary-50 border border-primary-300 hover:bg-primary-100 hover:text-primary-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white">3</a>
                            </li>
                            <li>
                                <a href="#" class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">...</a>
                            </li>
                            <li>
                                <a href="#" class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">100</a>
                            </li>
                            <li>
                                <a href="#" class="flex items-center justify-center h-full py-1.5 px-3 leading-tight text-gray-500 bg-white rounded-r-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                                    <span class="sr-only">Next</span>
                                    <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </section>

        <script type="text/javascript" nonce={ middlewares.GetRandomNonce(c) }>
            document.addEventListener('htmx:afterRequest', function(evt) {
                hljs.highlightAll();
                document.getElementById("snip-filter-list").style.display = "none";
            });

            window.onload = document.getElementById("snip-filter-list").style.display = "none";
            document.getElementById("snip-filter-button").addEventListener("click", showHideFilter);
            function showHideFilter() {
                if (document.getElementById("snip-filter-list").style.display === "none") {
                    document.getElementById("snip-filter-list").style.display = "";
                } else {
                    document.getElementById("snip-filter-list").style.display = "none";
                }
            }

            // document.getElementById("text-search-box").addEventListener("keyup", searchBoxFilter);
            // function searchBoxFilter() {
            //     var input, filter, table, tr, td, i, txtValue;
            //     input = document.getElementById("text-search-box");
            //     filter = input.value.toLowerCase();
            //     table = document.getElementById("snippets-table");
            //     tr = table.getElementsByTagName("tr");

            //     // Loop through all table rows, and hide those who don't match the search query
            //     for (i = 0; i < tr.length; i++) {
            //         td = tr[i].getElementsByTagName("td")[0];
            //         if (td) {
            //             txtValue = td.textContent || td.innerText;
            //             if (txtValue.toLowerCase().indexOf(filter) > -1) {
            //                 tr[i].style.display = "";
            //             } else {
            //                 tr[i].style.display = "none";
            //             }
            //         }
            //     }
            // }

            document.getElementById("text-search-box").addEventListener("keyup", checkBoxFilter);
            document.getElementById("snip-filter-elements").addEventListener("click", checkBoxFilter);
            function checkBoxFilter(){
                var show = [];
                var hide = [];

                var checkboxes = document.getElementsByName("filter-checkbox");
                var checkboxesChecked = [];
                for (var i=0; i<checkboxes.length; i++) {
                    if (checkboxes[i].checked) {
                        checkboxesChecked.push(checkboxes[i].value);
                    }
                }

                // console.log(checkboxesChecked);
                var input, filter, table, tr, td, i, txtValue;
                input = document.getElementById("text-search-box");
                filter = input.value.toLowerCase();
                table = document.getElementById("snippets-table");
                tr = table.getElementsByTagName("tr");

                // Checkbox filter
                if (checkboxesChecked.length > 0) {
                    for (i = 0; i < tr.length; i++) {
                        td = tr[i].getElementsByTagName("td")[2];
                        if (td) {
                            txtValue = td.textContent || td.innerText;
                            if (checkboxesChecked.indexOf(txtValue.toLowerCase()) === -1 ){ 
                                // tr[i].style.display = "none";
                                hide.push(tr[i]);
                            } else {
                                // tr[i].style.display = "";
                                show.push(tr[i]);
                            }
                        }
                    }
                } else {
                    for (i = 0; i < tr.length; i++) {
                        // tr[i].style.display = "";
                        show.push(tr[i]);
                    }
                }

                // Searchbox filter
                for (i = 0; i < tr.length; i++) {
                    td = tr[i].getElementsByTagName("td")[0];
                    if (td) {
                        txtValue = td.textContent || td.innerText;
                        if (txtValue.toLowerCase().indexOf(filter) === -1) {
                            if (!hide.includes(tr[i])){
                                hide.push(tr[i]);
                            }
                            if (show.includes(tr[i])){
                                var arrInd = show.indexOf(tr[i]);
                                show.splice(arrInd, 1);
                            }
                        }
                    }
                }
                // console.log("hide: "+hide)
                // console.log("show: "+show)
                for (i = 0; i < hide.length; i++) {
                    hide[i].style.display = "none";
                }
                for (i = 0; i < show.length; i++) {
                    show[i].style.display = "";
                }
            }
        </script>
    }
}